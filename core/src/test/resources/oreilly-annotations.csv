Book Title,Chapter Title,Date of Highlight,Book URL,Chapter URL,Annotation URL,Highlight,Personal Note
Clean Code: A Handbook of Agile Software Craftsmanship,Chapter 4: Comments,2021-10-28,https://learning.oreilly.com/library/view/-/9780136083238/,https://learning.oreilly.com/library/view/-/9780136083238/chapter04.html,https://learning.oreilly.com/library/view/-/9780136083238/chapter04.html#1fa7cc1b-0185-45ff-9dbb-53d3848325e3,Few practices are as odious as commenting-out code. Don’t do this!,
Clean Code: A Handbook of Agile Software Craftsmanship,Chapter 4: Comments,2021-10-28,https://learning.oreilly.com/library/view/-/9780136083238/,https://learning.oreilly.com/library/view/-/9780136083238/chapter04.html,https://learning.oreilly.com/library/view/-/9780136083238/chapter04.html#95c062c1-670e-4a19-849c-63cc3acc33e5,"Truth can only be found in one place: the code. Only the code can truly tell you what it does. It is the only source of truly accurate information. Therefore, though comments are sometimes necessary, we will expend significant energy to minimize them.",
Clean Code: A Handbook of Agile Software Craftsmanship,Chapter 4: Comments,2021-10-28,https://learning.oreilly.com/library/view/-/9780136083238/,https://learning.oreilly.com/library/view/-/9780136083238/chapter04.html,https://learning.oreilly.com/library/view/-/9780136083238/chapter04.html#3f979f26-8d05-465d-a73a-87b884721d20,"“Don’t comment bad code—rewrite it.”

—Brian W. Kernighan and P. J. Plaugher1",
Clean Code: A Handbook of Agile Software Craftsmanship,Chapter 3: Functions,2021-10-28,https://learning.oreilly.com/library/view/-/9780136083238/,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html#c3c3c99d-0598-49fd-8312-a2d1f1346818,"But I also have a suite of unit tests that cover every one of those clumsy lines of code.

So then I massage and refine that code, splitting out functions, changing names, eliminating duplication. I shrink the methods and reorder them. Sometimes I break out whole classes, all the while keeping the tests passing.",
Clean Code: A Handbook of Agile Software Craftsmanship,Chapter 3: Functions,2021-10-28,https://learning.oreilly.com/library/view/-/9780136083238/,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html#73cf7c99-7048-4451-864c-6f12b70fb22d,"So if you keep your functions small, then the occasional multiple return, break, or continue statement does no harm and can sometimes even be more expressive than the single-entry, single-exit rule. On the other hand, goto only makes sense in large functions, so it should be avoided.",
Clean Code: A Handbook of Agile Software Craftsmanship,Chapter 3: Functions,2021-10-28,https://learning.oreilly.com/library/view/-/9780136083238/,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html#abab25ec-5602-43bf-8bf0-6f73f78e55c3,"When you use exceptions rather than error codes, then new exceptions are derivatives of the exception class. They can be added without forcing any recompilation or redeployment.12

12. This is an example of the Open Closed Principle (OCP) [PPP02].",
Clean Code: A Handbook of Agile Software Craftsmanship,Chapter 3: Functions,2021-10-28,https://learning.oreilly.com/library/view/-/9780136083238/,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html,https://learning.oreilly.com/library/view/-/9780136083238/chapter03.html#bddf80e4-55b8-4e8a-be70-6fea7b458fdd,"Functions should either do something or answer something, but not both. Either your function should change the state of an object, or it should return some information about that object. Doing both often leads to confusion.",
